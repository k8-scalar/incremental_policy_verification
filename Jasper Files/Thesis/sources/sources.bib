Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{tenantguard,
abstract = {—Multi-tenancy in the cloud usually leads to security concerns over network isolation around each cloud tenant's virtual resources. However, verifying network isolation in cloud virtual networks poses several unique challenges. The sheer size of virtual networks implies a prohibitive complexity, whereas the constant changes in virtual resources demand a short re-sponse time. To make things worse, such networks typically allow fine-grained (e.g., VM-level) and distributed (e.g., security groups) network access control. Those challenges can either invalidate existing approaches or cause an unacceptable delay which prevents runtime applications. In this paper, we present TenantGuard, a scalable system for verifying cloud-wide, VM-level network isolation at runtime. We take advantage of the hierarchical nature of virtual networks, efficient data structures, incremental verification, and parallel computation to reduce the performance overhead of security verification. We implement our approach based on OpenStack and evaluate its performance both in-house and on Amazon EC2, which confirms its scalability and efficiency (13 seconds for verifying 168 millions of VM pairs). We further integrate TenantGuard with Congress, an OpenStack policy service, to verify compliance with respect to isolation requirements based on tenant-specific high-level security policies.},
author = {Wang, Yushun and Madi, Taous and Majumdar, Suryadipta and Jarraya, Yosr and Alimohammadifar, Amir and Pourzandi, Makan and Wang, Lingyu and Debbabi, Mourad},
doi = {10.14722/NDSS.2017.23365},
month = {may},
publisher = {Internet Society},
title = {{TenantGuard: Scalable Runtime Verification of Cloud-Wide VM-Level Network Isolation}},
year = {2017}
}
@misc{cni,
title = {{containernetworking/cni: Container Network Interface - networking for Linux containers}},
url = {https://github.com/containernetworking/cni},
urldate = {2023-11-27}
}
@misc{sgquotas,
title = {{OpenStack Docs: Manage quotas}},
url = {https://docs.openstack.org/nova/queens/admin/quotas2.html{\#}manage-quotas},
urldate = {2023-11-28}
}
@misc{namespace,
title = {{Namespaces | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/},
urldate = {2023-11-26}
}
@article{IslamShamim2020a,
abstract = {Kubernetes is an open-source software for automat-ing management of computerized services. Organizations, such as IBM, Capital One and Adidas use Kubernetes to deploy and manage their containers, and have reported benefits related to deployment frequency. Despite reported benefits, Kubernetes deployments are susceptible to security vulnerabilities, such as those that occurred at Tesla in 2018. A systematization of Kubernetes security practices can help practitioners mitigate vulnerabilities in their Kubernetes deployments. The goal of this paper is to help practitioners in securing their Kubernetes installations through a systematization of knowledge related to Kubernetes security practices. We systematize knowledge by applying qualitative analysis on 104 Internet artifacts. We identify 11 security practices that include (i) implementation of role-based access control (RBAC) authorization to provide least privilege, (ii) applying security patches to keep Kubernetes updated, and (iii) implementing pod and network specific security policies.},
archivePrefix = {arXiv},
arxivId = {2006.15275},
author = {{Islam Shamim}, Md Shazibul and {Ahamed Bhuiyan}, Farzana and Rahman, Akond},
doi = {10.1109/SECDEV45635.2020.00025},
eprint = {2006.15275},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Islam Shamim, Ahamed Bhuiyan, Rahman - 2020 - XI Commandments of kubernetes security A systematization of knowledge related to kubern(2).pdf:pdf},
isbn = {9781728183886},
journal = {Proceedings - 2020 IEEE Secure Development, SecDev 2020},
keywords = {containers,devops,devsecops,grey literature,kubernetes,practices,review,security,systematization of knowledge},
month = {sep},
pages = {58--64},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{XI Commandments of kubernetes security: A systematization of knowledge related to kubernetes security practices}},
year = {2020}
}
@misc{CNCF,
annote = {test
e},
title = {{CNCF Cloud Native Definition v1.0}},
url = {https://github.com/cncf/toc/blob/main/DEFINITION.md},
urldate = {2023-11-17}
}
@misc{OCI,
title = {{Open Container Initiative Charter v1.3}},
url = {https://github.com/opencontainers/tob/blob/main/CHARTER.md},
urldate = {2023-11-17}
}
@article{defensiveprogramming,
abstract = {This paper presents principles of Defensive Programming and examines the growing concern that these principles are not effectively incorporated into Computer Science and related computing degree programs' curricula. To support this concern, Defensive Programming principles are applied to a case study - Cross-site Scripting cybersecurity attacks. This paper concludes that Defensive Programming plays an important role in preventing these attacks and should thus be more aggressively integrated into CS courses such as Programming, Algorithms, Databases, Computer Architecture and Organization, and Computer Networks.},
author = {Teto, Joel Kamdem and Bearden, Ruth and Lo, Dan Chia Tien},
doi = {10.1145/3077286.3077571},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Teto, Bearden, Lo - 2017 - The impact of defensive programming on IO cybersecurity attacks.pdf:pdf},
isbn = {9781450350242},
journal = {Proceedings of the SouthEast Conference, ACMSE 2017},
keywords = {ACM proceedings,Text tagging,Word,• Cybersecurity → I/O Vulnerabilities},
month = {apr},
pages = {102--111},
publisher = {Association for Computing Machinery, Inc},
title = {{The impact of defensive programming on I/O cybersecurity attacks}},
url = {http://dx.doi.org/10.1145/3077286.3077571},
year = {2017}
}
@misc{sg,
title = {{OpenStack Docs: Manage project security}},
url = {https://docs.openstack.org/nova/queens/admin/security-groups.html},
urldate = {2023-11-28}
}
@misc{rkt,
title = {rkt - the pod-native container engine},
url = {https://github.com/rkt/rkt},
urldate = {2023-11-17}
}
@article{ciscoaci,
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Cisco ACI and Kubernetes Integration New and Changed Information 2.pdf:pdf},
title = {{Cisco ACI and Kubernetes Integration New and Changed Information 2}},
url = {https://www.cisco.com/c/dam/en/us/td/docs/Website/datacenter/aci/virtualization/matrix/virtmatrix.html ciscoaci}
}
@misc{contruntime,
title = {{What are container runtimes? | Opensource.com}},
url = {https://opensource.com/article/21/9/container-runtimes},
urldate = {2023-11-24}
}
@misc{CNCFSurvey,
title = {{CNCF Annual Survey 2022 | Cloud Native Computing Foundation}},
url = {https://www.cncf.io/reports/cncf-annual-survey-2022/},
urldate = {2023-11-17}
}
@misc{gcp,
title = {{Cloud Computing Services | Google Cloud}},
url = {https://cloud.google.com/?hl=en},
urldate = {2023-11-26}
}
@misc{kubeapiserver,
title = {{kube-apiserver | Kubernetes}},
url = {https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/},
urldate = {2023-11-26}
}
@misc{LXC,
title = {{Linux Containers}},
url = {https://linuxcontainers.org/},
urldate = {2023-11-20}
}
@misc{crio,
title = {cri-o},
url = {https://cri-o.io/},
urldate = {2023-11-20}
}
@misc{apachemesos,
title = {{Apache Mesos}},
url = {https://mesos.apache.org/},
urldate = {2023-11-26}
}
@article{illumio,
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2021 - Illumio Core for Kubernetes and OpenShift Illumio Core {\textregistered} C-VEN Legal Notices.pdf:pdf},
isbn = {25000-100-21.1.0},
title = {{Illumio Core for Kubernetes and OpenShift Illumio Core {\textregistered} C-VEN Legal Notices}},
url = {https://www.illumio.com/legal-information},
year = {2021}
}
@article{rbac,
abstract = {The basic concept of role-based access control (RBAC) is that permissions are associated with roles, and users are made members of appropriate roles, thereby acquiring the roles' permissions. This idea has been around since the advent of multi-user computing. Until recently, however, RBAC has received little attention from the research community. This chapter describes the motivations, results, and open issues in recent MAC research. The chapter focuses on four areas. First, RBAC is a multidimensional concept that can range from very simple at one extreme to quite complex and sophisticated at the other. This presents problems in coming up with a definitive model of RBAC. We see how this impasse is resolved by having a family of models which can accommodate all these variations. Second, we discuss how RBAC can be used to manage itself. Recent models developed for this purpose are presented. Third, the flexibility of RBAC can be demonstrated in many ways. Here we show how RBAC can be configured to enforce different variations of classical lattice-based mandatory access controls. Fourth, we describe a conceptual three-tier architecture for specification and enforcement of RBAC. The chapter concludes with a discussion of open issues in RBAC. {\textcopyright} 1998 Academic Press Inc.},
author = {Sandhu, Ravi S.},
doi = {10.1016/S0065-2458(08)60206-5},
issn = {0065-2458},
journal = {Advances in Computers},
month = {jan},
number = {C},
pages = {237--286},
publisher = {Elsevier},
title = {{Role-based Access Control}},
volume = {46},
year = {1998}
}
@misc{docker,
title = {{Docker: Accelerated Container Application Development}},
url = {https://www.docker.com/},
urldate = {2023-11-24}
}
@misc{k8snetworkmodel,
title = {{Services, Load Balancing, and Networking | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/services-networking/{\#}the-kubernetes-network-model},
urldate = {2023-11-27}
}
@misc{nps,
title = {{Network Policies | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/services-networking/network-policies/},
urldate = {2023-11-20}
}
@article{trust,
abstract = {Trust is a judgement of unquestionable utility-as humans we use it every day of our lives. However, trust has suffered from an imperfect understanding, a plethora of definitions, and informal use in the literature and in everyday life. It is common to say "I trust you, " but what does that mean? This thesis provides a clarification of trust. We present a formalism for trust which provides us with a tool for precise discussion. The formalism is implementable: it can be embedded in an artificial agent, enabling the agent to make trust-based decisions. Its applicability in the domain of Distributed Artificial Intelligence (DAI) is raised. The thesis presents a testbed populated by simple trusting agents which substantiates the utility of the formalism. The formalism provides a step in the direction of a proper understanding and definition of human trust. A contribution of the thesis is its detailed exploration of the possibilities of future work in the area. 1 Summary 1. Overview},
author = {Marsh, Stephen Paul},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Marsh - 1994 - Formalising trust as a computational concept.pdf:pdf},
keywords = {Trust,User,generated content},
publisher = {University of Stirling},
title = {{Formalising trust as a computational concept}},
url = {http://hdl.handle.net/1893/2010},
year = {1994}
}
@misc{dockerswarm,
title = {{Swarm mode overview | Docker Docs}},
url = {https://docs.docker.com/engine/swarm/},
urldate = {2023-11-26}
}
@misc{prismacloud,
title = {{Prisma Cloud}},
url = {https://docs.prismacloud.io/en/classic/cspm-admin-guide/get-started-with-prisma-cloud/prisma-cloud},
urldate = {2023-11-24}
}
@misc{mirantis,
title = {{Product Overview - Mirantis Container Runtime}},
url = {https://docs.mirantis.com/mcr/20.10/overview.html},
urldate = {2023-11-24}
}
@article{feasability,
abstract = {SaaS application instances typically serve multiple tenants to improve cost-efficiency. This results in the need for adaptive performance isolation between tenants in order to guarantee custom service level objectives (SLOs) about request latency or throughput. Current solutions, which are based on request scheduling algorithms, suffer from SLO instability under globally varying workloads. This means that the configuration for an SLO has to be recalibrated when total workload patterns change such as an increase or decrease in the number of subscribed tenants, or the application becomes co-located with other types of resource-intensive applications. Lately container technology such as Docker and container orchestration frameworks like Kubernetes have been used to increase cost-efficiency, multi-tenancy and elasticity. This paper investigates if the problem of adaptive performance isolation can be mapped to resource management concepts of Kubernetes through a series of experiments. These experiments show that Kubernetes provides good support for QoS differentiation and adaptive resource allocation by grouping tenants according to their SLO class (e.g gold vs bronze) in different containers. Moreover, SLO instability does not occur when co-locating these containers with other container-based applications provided that a few interferences between CPU-, memory- and disk-io intensive applications are taken into account. However SLO instability does occur when the number of subscribed tenants changes. This latter problem is not caused by the replication and auto-scaling concepts of Kubernetes, but by a non-linear resource scaling phenomenon that is inherent when the goal is to meet multiple custom SLOs in a cost-optimal way.},
author = {Truyen, Eddy and Jacobs, Andr{\'{e}} and Verreydt, Stef and Beni, Emad Heydari and Lagaisse, Bert and Joosen, Wouter},
doi = {10.1145/3341105.3374034},
isbn = {9781450368667},
journal = {Proceedings of the ACM Symposium on Applied Computing},
keywords = {Container orchestration frameworks,Multi-tenant SaaS,Performance isolation},
month = {mar},
pages = {162--169},
publisher = {Association for Computing Machinery},
title = {{Feasibility of container orchestration for adaptive performance isolation in multi-tenant SaaS applications}},
url = {https://lirias.kuleuven.be/retrieve/566299},
year = {2020}
}
@misc{cnwiki,
title = {{Container Engines: How They Work and Top 7 Options}},
url = {https://www.aquasec.com/cloud-native-academy/container-platforms/container-engines/{\#}Docker},
urldate = {2023-11-24}
}
@article{Bernstein2014,
abstract = {This issue's 'Cloud Tidbit' focuses on container technology and how it's emerging as an important part of the cloud computing infrastructure. It looks at Docker, an open source project that automates the faster deployment of Linux applications, and Kubernetes, an open source cluster manager for Docker containers.},
author = {Bernstein, David},
doi = {10.1109/MCC.2014.51},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bernstein - 2014 - Containers and cloud From LXC to docker to kubernetes.pdf:pdf},
issn = {23256095},
journal = {IEEE Cloud Computing},
keywords = {cloud,containers,dockers,virtual machines},
month = {sep},
number = {3},
pages = {81--84},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Containers and cloud: From LXC to docker to kubernetes}},
volume = {1},
year = {2014}
}
@article{Openstack,
abstract = {Cloud computing is a quite new concept for which the resources are virtualized, dynamically extended and provided as a service on the Internet. In this paper, we present a comparative study between some of the IaaS (Infrastructure as a Service) commonly used to select the best suited one for deployment and research development in the field of cloud computing. The aim is to provide the computer industry with the opportunity to build a hosting architecture, massively scalable which is completely open source, while overcoming the constraints and the use of proprietary technologies. Then, we present the solution OpenStack retained by the comparative study. We discuss in detail its functional and architectural system. We finish by a discussion of the motivation of our choice of the IaaS solution.},
author = {Sefraoui, Omar and Aissaoui, Mohammed and Eleuldj, Mohsine},
doi = {10.5120/8738-2991},
journal = {International Journal of Computer Applications},
month = {oct},
number = {3},
pages = {38--42},
publisher = {Foundation of Computer Science},
title = {{OpenStack: Toward an Open-source Solution for Cloud Computing}},
volume = {55},
year = {2012}
}
@misc{k8snp,
title = {{Network Policies | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/services-networking/network-policies/},
urldate = {2023-11-26}
}
@misc{sgrule,
title = {{OpenStack Docs: security group rule}},
url = {https://docs.openstack.org/python-openstackclient/train/cli/command-objects/security-group-rule.html},
urldate = {2023-11-28}
}
@misc{k8scni,
title = {{Network Plugins | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/},
urldate = {2023-11-27}
}
@misc{calico,
title = {{projectcalico/calico: Cloud native networking and network security}},
url = {https://github.com/projectcalico/calico},
urldate = {2023-11-27}
}
@misc{weave,
title = {{weaveworks/weave: Simple, resilient multi-host containers networking and more.}},
url = {https://github.com/weaveworks/weave},
urldate = {2023-11-27}
}
@misc{pod,
title = {{Pods | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/workloads/pods/},
urldate = {2023-11-26}
}
@misc{labels,
title = {{Labels and Selectors | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/},
urldate = {2023-11-26}
}
@misc{dockerengine,
title = {{Docker Engine overview | Docker Docs}},
url = {https://docs.docker.com/engine/},
urldate = {2023-11-23}
}
@misc{aws,
title = {{Cloud Computing Services - Amazon Web Services (AWS)}},
url = {https://aws.amazon.com/},
urldate = {2023-11-26}
}
@article{cnci4,
abstract = {Cloud-based architectures are advantageous in aspects such as scalability, reliability and resource utilization efficiency, to name just a few, thus being considered one of the pillars of Industry 4.0. However, in this domain, cloud computing platforms are subject to specific requirements, namely in what concerns real-time performance, determinism and fault-tolerance. This paper focuses on cloud native computing, which is an emerging and promising cloud-computing paradigm, specifically addressing its applicability to real-time systems. Firstly, it introduces the architecture of cloud native applications, discussing their principles, potential advantages and challenges. Then it addresses the opportunities and constraints of such technologies when applied to industrial real-time systems.},
author = {Gil, Guilherme and Corujo, Daniel and Pedreiras, Paulo},
doi = {10.1109/ETFA45728.2021.9613386},
isbn = {9781728129891},
issn = {19460759},
journal = {IEEE International Conference on Emerging Technologies and Factory Automation, ETFA},
keywords = {Cloud native,Industrial Informatics,Quality-of-Service,Real-time systems,Scheduling},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Cloud Native Computing for Industry 4.0: Challenges and Opportunities}},
volume = {2021-Septe},
year = {2021}
}
@misc{opencontainers,
title = {{About the Open Container Initiative - Open Container Initiative}},
url = {https://opencontainers.org/about/overview/},
urldate = {2023-11-24}
}
@article{Mesos,
author = {Hindman, Benjamin and Konwinski, A. and Zaharia, M. and Ghodsi, A. and Joseph, A. and Katz, R. and Shenker, S. and Stoica, I.},
journal = {Symposium on Networked Systems Design and Implementation},
title = {{Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center}},
url = {https://api.semanticscholar.org/CorpusID:892222},
year = {2011}
}
@article{resman,
abstract = {Businesses have made increasing adoption and incorporation of cloud technology into internal processes in the last decade. The cloud-based deployment provides on-demand availability without active management. More recently, the concept of cloud-native application has been proposed and represents an invaluable step toward helping organizations develop software faster and update it more frequently to achieve dramatic business outcomes. Cloud-native is an approach to build and run applications that exploit the cloud computing delivery model's advantages. It is more about how applications are created and deployed than where. The container-based virtualization technology, such as Docker and Kubernetes, serves as the foundation for cloud-native applications. This paper investigates the performance of two popular computational-intensive applications, big data, and deep learning, in a cloud-native environment. We analyze the system overhead and resource usage for these applications. Through extensive experiments, we show that the completion time reduces by up to 79.4{\%} by changing the default setting and increases by up to 96.7{\%} due to different resource management schemes on two platforms. Additionally, the resource release is delayed by up to 116.7{\%} across different systems. Our work can guide developers, administrators, and researchers to better design and deploy their applications by selecting and configuring a hosting platform.},
archivePrefix = {arXiv},
arxivId = {2010.10350},
author = {Mao, Ying and Fu, Yuqi and Gu, Suwen and Vhaduri, Sudip and Cheng, Long and Liu, Qingzhi},
eprint = {2010.10350},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mao et al. - 2020 - Resource Management Schemes for Cloud-Native Platforms with Computing Containers of Docker and Kubernetes.pdf:pdf},
keywords = {Apache Yarn and Spark,Docker Swarm,Index Terms-Container Management,Ku-bernetes,Pytorch,Tensorflow},
month = {oct},
title = {{Resource Management Schemes for Cloud-Native Platforms with Computing Containers of Docker and Kubernetes}},
url = {https://arxiv.org/abs/2010.10350v1},
year = {2020}
}
@misc{node,
title = {{Nodes | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/architecture/nodes/},
urldate = {2023-11-26}
}
@inproceedings{kano,
abstract = {Container technology is a light weight back-end virtualization solution which copes with the growing demand for internet service concurrency. For security and availability, network isolation is essential in container network. Label based network access control policies are employed as a network isolation solution by the famous container orchestrator, Kubernetes. The large scale and flexibility of container networks implies a prohibitive complexity, whereas the constant changes of policies and containers demand a short response time, thus the policy verification needs to be efficient. However, there is no existing tool that solves the verification problem of label based network access control policies. Kano is proposed as the first system to cover container network policy verification, including incremental verification. It leverages on a prefiltration algorithm to reduce the time complexity of reachability matrix calculation from O(n2) to O(n). With predefined and user-defined constraints which can be verified quickly with the reachability matrix, Kano removes potential risk from the container network. Based on the verification result, Kano provides advices to reinforce the security and availability of the container network.},
author = {Li, Yifan and Jia, Chengjun and Hu, Xiaohe and Li, Jun},
booktitle = {Proceedings - Symposium on the High Performance Interconnects, Hot Interconnects},
doi = {10.1109/HOTI51249.2020.00024},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Li et al. - 2020 - Kano Efficient container network policy verification.pdf:pdf},
isbn = {9781728195896},
issn = {15504794},
keywords = {Attribute-Based Access Control,Container Networks,Network Verification},
month = {aug},
pages = {63--70},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Kano: Efficient container network policy verification}},
volume = {2020-Augus},
year = {2020}
}
@article{leastprivilige,
abstract = {This tutorial paper explores the mechanics of protecting computer-stored information from unauthorized use or modification. It concentrates on those architectural structures-whether hardware or software-that are necessary to support information protection. The paper develops in three main sections. Section I describes desired functions, design principles, and examples of elementary protection and authentication mechanisms. Any reader familiar with computers should find the first section to be reasonably accessible. Section II requires some familiarity with descriptor-based computer architecture. It examines in depth the principles of modern protection architectures and the relation between capability systems and access control list systems, and ends with a brief analysis of protected subsystems and protected objects. The reader who is dismayed by either the prerequisites or the level of detail in the second section may wish to skip to Section III, which reviews the state of the art and current research projects and provides suggestions for further reading. {\textcopyright} 1975, IEEE. All rights reserved.},
author = {Saltzer, Jerome H. and Schroeder, Michael D.},
doi = {10.1109/PROC.1975.9939},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Saltzer, Schroeder - 1975 - The Protection of Information in Computer Systems.pdf:pdf},
issn = {15582256},
journal = {Proceedings of the IEEE},
number = {9},
pages = {1278--1308},
title = {{The Protection of Information in Computer Systems}},
volume = {63},
year = {1975}
}
@misc{chromeos,
title = {{ChromeOS (Operating System) - Chrome Enterprise}},
url = {https://chromeenterprise.google/os/},
urldate = {2023-11-28}
}
@article{grashopper,
abstract = {Packaging applications in containers and managing them dynamically using a cluster orchestrator is the de-facto approach for deployment of cloud-native applications. When containers run inside virtual machines (VMs) to protect infrastructural assets, network policies (NPs) at the container layer and security groups (SGs) at the VM layer provide complementary firewall mechanisms that strengthen defenses against lateral movement of attackers. However, least-privilege NPs at the container layer may not always be consistent with statically defined, over-permissive SGs at the VM layer. This is especially a problem with low-latency configuration of container networking solutions that requires every opened container protocol, port and traffic direction also to be opened at the VM layer. In any post-exploitation scenario where attackers escape from within an already compromised or infected container, such over-permissive SGs do not prevent the attacker from spreading across VMs to find powerful tokens for accessing the cluster orchestrator. In this paper, we introduce GrassHopper (GH), a fast and dynamic cross-layer enforcement approach for NPs, which automatically generates SG configurations from dynamically verified NPs. Given the low-latency context, the design of GH must ensure that dynamically generated SG rules are applied fast before the newly scheduled containers become ready to serve traffic. We evaluate GH on a Kubernetes cluster running on OpenStack. For a wide range of relevant low-latency applications and cluster setups, GH can reduce the network attack surface between VMs at a ratio of 75-to-99{\%} while causing no application level performance overhead with respect to latency, throughput, and CPU utilization.},
author = {Budigiri, Gerald and Baumann, Christoph and Truyen, Eddy and Muhlberg, Jan Tobias and Joosen, Wouter},
doi = {10.1109/CLOUD60044.2023.00036},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Budigiri et al. - 2023 - Zero-Cost In-Depth Enforcement of Network Policies for Low-Latency Cloud-Native Systems.pdf:pdf},
isbn = {9798350304817},
issn = {21596190},
journal = {IEEE International Conference on Cloud Computing, CLOUD},
keywords = {container orchestration,kubernetes,network isolation,network policies,security groups},
pages = {249--261},
publisher = {IEEE Computer Society},
title = {{Zero-Cost In-Depth Enforcement of Network Policies for Low-Latency Cloud-Native Systems}},
volume = {2023-July},
year = {2023}
}
@misc{comparisonenginevsdesktop,
title = {{Docker Alternatives: Comprehensive Overview Guide | Docker}},
url = {https://www.docker.com/products/docker-desktop/alternatives/},
urldate = {2023-11-24}
}
@misc{moby,
title = {{Moby}},
url = {https://mobyproject.org},
urldate = {2023-11-24}
}
@misc{neutron,
title = {calico/networking-calico at master {\textperiodcentered} projectcalico/calico},
url = {https://github.com/projectcalico/calico/tree/master/networking-calico},
urldate = {2023-11-27}
}
@misc{kubelet,
title = {{kubelet | Kubernetes}},
url = {https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/},
urldate = {2023-11-26}
}
@misc{4cs,
title = {{Overview of Cloud Native Security | Kubernetes}},
url = {https://kubernetes.io/docs/concepts/security/overview/},
urldate = {2023-11-20}
}
@misc{azure,
title = {{Cloud Computing Services | Microsoft Azure}},
url = {https://azure.microsoft.com/en-us},
urldate = {2023-11-26}
}
@misc{pythonk8s,
title = {{kubernetes-client/python: Official Python client library for kubernetes}},
url = {https://github.com/kubernetes-client/python},
urldate = {2023-11-26}
}
@article{nfvguard,
abstract = {Network Functions Virtualization (NFV) enables agile and cost-effective deployment of multi-tenant network services on top of a cloud infrastructure. However, the multi-tenant and multilevel nature of NFV may lead to novel security challenges, such as stealthy attacks exploiting potential inconsistencies between different levels of the NFV stacks. Consequently, the security compliance of a multilevel NFV stack cannot be sufficiently established using existing solutions, which typically focus on one level. Moreover, the naive approach of separately verifying every level could be expensive or even infeasible. In this paper, we propose, NFVGuard, the first multilevel approach to the formal security verification of NFV stacks. Our key idea is to conduct the security verification at only one level, and then assure that verification result for other levels by verifying the consistency between adjacent levels. We integrate NFVGuard with OpenStack/Tacker, a popular platform for the NFV deployment, and experimentally evaluate its effectiveness.},
author = {Oqaily, Alaa and Sudershan, L. T. and Jarraya, Yosr and Majumdar, Suryadipta and Zhang, Mengyuan and Pourzandi, Makan and Wang, Lingyu and Debbabi, Mourad},
doi = {10.1109/CLOUDCOM49646.2020.00003},
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Oqaily et al. - 2020 - NFVGuard Verifying the Security of Multilevel Network Functions Virtualization (NFV) Stack.pdf:pdf},
isbn = {9780738143767},
issn = {23302186},
journal = {Proceedings of the International Conference on Cloud Computing Technology and Science, CloudCom},
keywords = {Formal Verification,NFV,OpenStack,Security Verification,Tacker,Topology Consistency},
month = {dec},
pages = {33--40},
publisher = {IEEE Computer Society},
title = {{NFVGuard: Verifying the Security of Multilevel Network Functions Virtualization (NFV) Stack}},
volume = {2020-Decem},
year = {2020}
}
@misc{ebpf,
title = {{eBPF use cases | Calico Documentation}},
url = {https://docs.tigera.io/calico/latest/operations/ebpf/use-cases-ebpf},
urldate = {2023-11-27}
}
@misc{linuxfoundation,
title = {{Linux Foundation - Decentralized innovation, built with trust}},
url = {https://www.linuxfoundation.org/},
urldate = {2023-11-24}
}
@misc{containerd,
title = {{containerd/containerd: An open and reliable container runtime}},
url = {https://github.com/containerd/containerd},
urldate = {2023-11-24}
}
@article{vmwarensx,
file = {:C$\backslash$:/Users/jaspe/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2017 - NSX Container Plugin for Kubernetes and Tanzu Application Service-Installation and Administration Guide NSX Container P.pdf:pdf},
title = {{NSX Container Plugin for Kubernetes and Tanzu Application Service-Installation and Administration Guide NSX Container Plugin for Kubernetes and Tanzu Application Service-Installation and Administration Guide VMware, Inc. 2}},
url = {https://docs.vmware.com/www.vmware.com},
year = {2017}
}
@misc{cilium,
title = {{cilium/cilium: eBPF-based Networking, Security, and Observability}},
url = {https://github.com/cilium/cilium},
urldate = {2023-11-27}
}
@misc{secgroups,
title = {{OpenStack Docs: Manage project security}},
url = {https://docs.openstack.org/nova/queens/admin/security-groups.html},
urldate = {2023-11-20}
}
@misc{containerterminology,
title = {{A Practical Introduction to Container Terminology | Red Hat Developer}},
url = {https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction{\#}container{\_}runtime},
urldate = {2023-11-24}
}
